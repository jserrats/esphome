esphome:
  name: esp-rack
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pass
  use_address: esp-rack.iot

ota:

# Enable logging
logger:

api:

mqtt:
  broker: mqtt.lan
  discovery: false
  #topic_prefix: esphome/ble2ha


esp32_ble_tracker:

sensor:
  - platform: bh1750
    name: "Studio Illuminance"
    address: 0x23
    update_interval: 60s

  # https://esphome.io/components/sensor/xiaomi_miscale.html
  - platform: xiaomi_miscale
    mac_address: "E0:0F:2D:A6:78:41"
    weight:
      #name: "Xiaomi Mi Scale Weight"
      id: weight_miscale
      on_value:
        then:
          # - lambda: |-
          #     if (id(weight_miscale).state >= 70 && id(weight_miscale).state <= 90) {
          #       return id(weight_jaume).publish_state(x);}
          #     else if (id(weight_miscale).state >= 50 && id(weight_miscale).state <= 70) {
          #       return id(weight_judit).publish_state(x);}
          - mqtt.publish:
              topic: !lambda |-
                if (id(weight_miscale).state >= 70 && id(weight_miscale).state <= 90) return "esphome/ble2ha/weight/jaume";
                else return "esphome/ble2ha/weight/judit";
              payload: !lambda |-
                char buf[10];
                sprintf(buf,  "%1.3f", id(weight_miscale).state);
                return ((std::string) buf).c_str();
              retain: true
    impedance:
      #name: "Xiaomi Mi Scale Impedance"
      id: impedance_miscale
      on_value:
        then:
            - mqtt.publish:
                topic: !lambda |-
                  if (id(weight_miscale).state >= 70 && id(weight_miscale).state <= 90) return "esphome/ble2ha/impedance/jaume";
                  else return "esphome/ble2ha/impedance/judit";
                payload: !lambda |-
                  char buf[10];
                  sprintf(buf,  "%1.3f", id(impedance_miscale).state);
                  return ((std::string) buf).c_str();
                retain: true

  # - platform: homeassistant
  #   name: "sensor.shelly1pm0_power"
  #   id: shelly1pm0_power
  #   entity_id: sensor.shelly1pm0_power

time:
- platform: sntp
  id: esptime

i2c:
  sda: GPIO21
  scl: GPIO22

# display:
#   - platform: lcd_pcf8574
#     dimensions: 20x4
#     address: 0x27
#     id: mydisplay
#     update_interval: 1s
#     lambda: |-
#       // Print the current time
#       it.strftime("%X %a %d / %m", id(esptime).now());
#       // it.printf(0,1,"UP:%.0fD", id(uptime).state);
#       it.printf(9,1,"PWR:%2.1f%W ", id(shelly1pm0_power).state);
#       //it.printf(0,3,"%s", id(system_info).state.c_str());
# switch:
#   - platform: template
#     id: backlight
#     name: LCD Backlight
#     icon: mdi:brightness-6
#     turn_on_action:
#       then:
#         - lambda: |-
#             id(mydisplay).backlight();
#         - switch.template.publish:
#             id: backlight
#             state: ON
#     turn_off_action:
#       then:
#         - lambda: |-
#             id(mydisplay).no_backlight();
#         - switch.template.publish:
#             id: backlight
#             state: OFF